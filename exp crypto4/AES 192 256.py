from pycallgraph import PyCallGraph
from pycallgraph.output import GraphvizOutput


def s_map(m):
    s_box = [[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],
[0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],
[0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],
[0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],
[0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],
[0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],
[0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],
[0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],
[0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],
[0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],
[0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],
[0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],
[0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],
[0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],
[0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],
[0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]]
    s_m = hex(m)[2:]
    while len(s_m) < 32:
        s_m = '0'+s_m
    s_ans = ''
    for i in range(0, 32, 2):
        if ord('a')<=ord(s_m[i])<=ord('z'):
            row = ord(s_m[i])-ord('a')+10
        else:
            row = eval(s_m[i])
        if ord('a') <= ord(s_m[i+1]) <= ord('z'):
            col = ord(s_m[i+1]) - ord('a') + 10
        else:
            col = eval(s_m[i+1])
        temp = hex(s_box[row][col])[2:]
        while len(temp) < 2:
            temp = '0'+temp
        s_ans += temp
    return eval('0x'+s_ans)
#没问题


def r_s_map(m):
    r_s_box = [[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
[0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
[0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
[0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
[0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
[0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
[0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
[0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
[0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
[0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
[0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
[0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
[0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
[0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
[0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
[0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]]
    s_m = hex(m)[2:]
    while len(s_m) < 32:
        s_m = '0' + s_m
    s_ans = ''
    for i in range(0, 32, 2):
        if ord('a') <= ord(s_m[i]) <= ord('z'):
            row = ord(s_m[i]) - ord('a') + 10
        else:
            row = eval(s_m[i])
        if ord('a') <= ord(s_m[i + 1]) <= ord('z'):
            col = ord(s_m[i + 1]) - ord('a') + 10
        else:
            col = eval(s_m[i + 1])
        temp = hex(r_s_box[row][col])[2:]
        while len(temp) < 2:
            temp = '0' + temp
        s_ans += temp
    return eval('0x' + s_ans)


def RM(n):
    mat = []
    mat_t = []
    pick = 0xff
    move =120
    for i in range(0, 4):
        line = []
        for j in range(4):
            line.append((n>>move)&pick)
            move -= 8
        mat_t.append(line)
    for i in range(0, 4):
        line = []
        for j in range(4):
            line.append(mat_t[j][i])
        mat.append(line)
    for i in range(0, 4):
        mat[i] = mat[i][i:]+mat[i][:i]
    return mat


def r_RM(n):
    #ans = (mat[0][0] << 120) | (mat[0][1] << 112) | (mat[0][2] << 104) | (mat[0][3]<<96)|(mat[1][0] << 88) | (mat[1][1] << 80) | (mat[1][2] << 72) | (mat[1][3]<<64)|(mat[2][0] << 56) | (mat[2][1] << 48) | (mat[2][2] << 40) | (mat[2][3]<<32)|(mat[3][0] << 24) | (mat[3][1] << 16) | (mat[3][2] << 8) | (mat[3][3])
    mat = []
    mat_t = []
    pick = 0xff
    move = 120
    for i in range(0, 4):
        line = []
        for j in range(4):
            line.append((n >> move) & pick)
            move -= 8
        mat_t.append(line)
    for i in range(0, 4):
        line = []
        for j in range(4):
            line.append(mat_t[j][i])
        mat.append(line)
    for i in range(0, 4):
        mat[i] = mat[i][4-i:] + mat[i][:4-i]
    ans = (mat[0][0] << 120) | (mat[1][0] << 112) | (mat[2][0] << 104) | (mat[3][0]<<96)|(mat[0][1] << 88) | (mat[1][1] << 80) | (mat[2][1] << 72) | (mat[3][1]<<64)|(mat[0][2] << 56) | (mat[1][2] << 48) | (mat[2][2] << 40) | (mat[3][2]<<32)|(mat[0][3] << 24) | (mat[1][3] << 16) | (mat[2][3] << 8) | (mat[3][3])

    return ans


def g(li, round):
    #R_con = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]
    #轮常量变？
    R_con = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]
    li = li[1:]+li[:1]
    in_ = (li[0]<<24)|(li[1]<<16)|(li[2]<<8)|li[3]
    ans = []
    #轮常量异或
    n = s_map(in_)^R_con[round]
    pick = 0xff
    move = 24
    for i in range(4):
        ans.append((n>>move)&pick)
        move -= 8
    return ans



def key_expand(key, l):
    mat = []#第一轮没问题 256 12轮 注意256 sub与轮常量并不同步
    move = 120
    if l == 192:
        round = 12
        move = 184
    elif l == 256:
        round = 14
        move = 248
    pick = 0xff
    for i in range(0, l//32):
        line = []
        for j in range(4):
            line.append((key>>move) & pick)
            move -= 8
        mat.append(line)
    W = []
    for i in range(0, l//32):
        word = []
        for j in range(0, 4):
            #word.append(mat[j][i])
            word.append(mat[i][j])
        W.append(word)
    for i in range(l//32, 4*(round+1)):
        word = []
        for j in range(4):
            word.append(0)
        W.append(word)
    for i in range(l//32, 4*(round+1)):
        #括号
        if i % (l//32) != 0:
            if l == 256 and i % 4 == 0:
                for j in range(4):
                    #W[i][j] = W[i-l//32][j]^s_map(W[i-1][j])
                    #W[j][i] = W[j][i - 4] ^ W[j][i - 1]
                    W[i][j] = W[i - l // 32][j] ^ (s_map(W[i - 1][j])&0xff)
            else:
                for j in range(4):
                    W[i][j] = W[i-l//32][j]^W[i-1][j]
        else:
            for j in range(4):
                #W[i][j] = W[i-l//32][j]^g(W[i-1], (i-l//32)//4)[j]
                W[i][j] = W[i - l // 32][j] ^ g(W[i - 1], i//(l//32)-1)[j]
                #W[j][i] = W[j][i - 4] ^ g(W[i - 1], (i - 4) // 10)[j]
                #注意轮数
    return W#包含所有字的矩阵
#确认正确


def gfmutiply(a, b):
	#ans = 0
	#p = 0xe5
	#digit_1 = p.bit_length()-1
	#while b > 0:
		#if b & 1 == 1:
			#ans = ans ^ a
		#a, b = a << 1, b >> 1
		#if a >> digit_1:  # 取出 a 的最高位
			#a = a ^ p
	#return ans%256'
    logTable = [
        0x00, 0xff, 0xc8, 0x08, 0x91, 0x10, 0xd0, 0x36,
        0x5a, 0x3e, 0xd8, 0x43, 0x99, 0x77, 0xfe, 0x18,
        0x23, 0x20, 0x07, 0x70, 0xa1, 0x6c, 0x0c, 0x7f,
        0x62, 0x8b, 0x40, 0x46, 0xc7, 0x4b, 0xe0, 0x0e,
        0xeb, 0x16, 0xe8, 0xad, 0xcf, 0xcd, 0x39, 0x53,
        0x6a, 0x27, 0x35, 0x93, 0xd4, 0x4e, 0x48, 0xc3,
        0x2b, 0x79, 0x54, 0x28, 0x09, 0x78, 0x0f, 0x21,
        0x90, 0x87, 0x14, 0x2a, 0xa9, 0x9c, 0xd6, 0x74,
        0xb4, 0x7c, 0xde, 0xed, 0xb1, 0x86, 0x76, 0xa4,
        0x98, 0xe2, 0x96, 0x8f, 0x02, 0x32, 0x1c, 0xc1,
        0x33, 0xee, 0xef, 0x81, 0xfd, 0x30, 0x5c, 0x13,
        0x9d, 0x29, 0x17, 0xc4, 0x11, 0x44, 0x8c, 0x80,
        0xf3, 0x73, 0x42, 0x1e, 0x1d, 0xb5, 0xf0, 0x12,
        0xd1, 0x5b, 0x41, 0xa2, 0xd7, 0x2c, 0xe9, 0xd5,
        0x59, 0xcb, 0x50, 0xa8, 0xdc, 0xfc, 0xf2, 0x56,
        0x72, 0xa6, 0x65, 0x2f, 0x9f, 0x9b, 0x3d, 0xba,
        0x7d, 0xc2, 0x45, 0x82, 0xa7, 0x57, 0xb6, 0xa3,
        0x7a, 0x75, 0x4f, 0xae, 0x3f, 0x37, 0x6d, 0x47,
        0x61, 0xbe, 0xab, 0xd3, 0x5f, 0xb0, 0x58, 0xaf,
        0xca, 0x5e, 0xfa, 0x85, 0xe4, 0x4d, 0x8a, 0x05,
        0xfb, 0x60, 0xb7, 0x7b, 0xb8, 0x26, 0x4a, 0x67,
        0xc6, 0x1a, 0xf8, 0x69, 0x25, 0xb3, 0xdb, 0xbd,
        0x66, 0xdd, 0xf1, 0xd2, 0xdf, 0x03, 0x8d, 0x34,
        0xd9, 0x92, 0x0d, 0x63, 0x55, 0xaa, 0x49, 0xec,
        0xbc, 0x95, 0x3c, 0x84, 0x0b, 0xf5, 0xe6, 0xe7,
        0xe5, 0xac, 0x7e, 0x6e, 0xb9, 0xf9, 0xda, 0x8e,
        0x9a, 0xc9, 0x24, 0xe1, 0x0a, 0x15, 0x6b, 0x3a,
        0xa0, 0x51, 0xf4, 0xea, 0xb2, 0x97, 0x9e, 0x5d,
        0x22, 0x88, 0x94, 0xce, 0x19, 0x01, 0x71, 0x4c,
        0xa5, 0xe3, 0xc5, 0x31, 0xbb, 0xcc, 0x1f, 0x2d,
        0x3b, 0x52, 0x6f, 0xf6, 0x2e, 0x89, 0xf7, 0xc0,
        0x68, 0x1b, 0x64, 0x04, 0x06, 0xbf, 0x83, 0x38,
    ]
    expTable = [
        0x01, 0xe5, 0x4c, 0xb5, 0xfb, 0x9f, 0xfc, 0x12,
        0x03, 0x34, 0xd4, 0xc4, 0x16, 0xba, 0x1f, 0x36,
        0x05, 0x5c, 0x67, 0x57, 0x3a, 0xd5, 0x21, 0x5a,
        0x0f, 0xe4, 0xa9, 0xf9, 0x4e, 0x64, 0x63, 0xee,
        0x11, 0x37, 0xe0, 0x10, 0xd2, 0xac, 0xa5, 0x29,
        0x33, 0x59, 0x3b, 0x30, 0x6d, 0xef, 0xf4, 0x7b,
        0x55, 0xeb, 0x4d, 0x50, 0xb7, 0x2a, 0x07, 0x8d,
        0xff, 0x26, 0xd7, 0xf0, 0xc2, 0x7e, 0x09, 0x8c,
        0x1a, 0x6a, 0x62, 0x0b, 0x5d, 0x82, 0x1b, 0x8f,
        0x2e, 0xbe, 0xa6, 0x1d, 0xe7, 0x9d, 0x2d, 0x8a,
        0x72, 0xd9, 0xf1, 0x27, 0x32, 0xbc, 0x77, 0x85,
        0x96, 0x70, 0x08, 0x69, 0x56, 0xdf, 0x99, 0x94,
        0xa1, 0x90, 0x18, 0xbb, 0xfa, 0x7a, 0xb0, 0xa7,
        0xf8, 0xab, 0x28, 0xd6, 0x15, 0x8e, 0xcb, 0xf2,
        0x13, 0xe6, 0x78, 0x61, 0x3f, 0x89, 0x46, 0x0d,
        0x35, 0x31, 0x88, 0xa3, 0x41, 0x80, 0xca, 0x17,
        0x5f, 0x53, 0x83, 0xfe, 0xc3, 0x9b, 0x45, 0x39,
        0xe1, 0xf5, 0x9e, 0x19, 0x5e, 0xb6, 0xcf, 0x4b,
        0x38, 0x04, 0xb9, 0x2b, 0xe2, 0xc1, 0x4a, 0xdd,
        0x48, 0x0c, 0xd0, 0x7d, 0x3d, 0x58, 0xde, 0x7c,
        0xd8, 0x14, 0x6b, 0x87, 0x47, 0xe8, 0x79, 0x84,
        0x73, 0x3c, 0xbd, 0x92, 0xc9, 0x23, 0x8b, 0x97,
        0x95, 0x44, 0xdc, 0xad, 0x40, 0x65, 0x86, 0xa2,
        0xa4, 0xcc, 0x7f, 0xec, 0xc0, 0xaf, 0x91, 0xfd,
        0xf7, 0x4f, 0x81, 0x2f, 0x5b, 0xea, 0xa8, 0x1c,
        0x02, 0xd1, 0x98, 0x71, 0xed, 0x25, 0xe3, 0x24,
        0x06, 0x68, 0xb3, 0x93, 0x2c, 0x6f, 0x3e, 0x6c,
        0x0a, 0xb8, 0xce, 0xae, 0x74, 0xb1, 0x42, 0xb4,
        0x1e, 0xd3, 0x49, 0xe9, 0x9c, 0xc8, 0xc6, 0xc7,
        0x22, 0x6e, 0xdb, 0x20, 0xbf, 0x43, 0x51, 0x52,
        0x66, 0xb2, 0x76, 0x60, 0xda, 0xc5, 0xf3, 0xf6,
        0xaa, 0xcd, 0x9a, 0xa0, 0x75, 0x54, 0x0e, 0x01,
    ]
    #!0
    if a != 0 and b != 0:
        return expTable[(logTable[a] + logTable[b]) % 255]
    else:
        return 0


def mat_mult(A, f):
    Arow, Acol = len(A), len(A[0])
    frow, fcol = len(f), len(f[0])
    if Acol != frow:
        return 'False!'
    ans = [[0] * fcol for _ in range(Arow)]
    for i in range(fcol):
        for j in range(Arow):
            for k in range(frow):
                #ans[j][i] += A[j][k] * f[k][i]
                ans[j][i] ^= gfmutiply(A[j][k], f[k][i])
    return ans


def CM(mat):
    mat_CM = [[0x02, 0x03, 0x01, 0x01],
            [0x01, 0x02, 0x03, 0x01],
            [0x01, 0x01, 0x02, 0x03],
            [0x03, 0x01, 0x01, 0x02]]
    ans = mat_mult(mat_CM, mat)
    return ans#已修正


def mat2n(mat):
    ans = 0
    move = 120
    for i in range(4):
        for j in range(4):
            ans |= (mat[j][i]<<move)
            move -= 8
    return ans


def r_CM(n):
    mat_rCM = [[0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]]
    mat_t = []
    pick = 0xff
    move = 120
    for i in range(0, 4):
        line = []
        for j in range(4):
            line.append((n >> move) & pick)
            move -= 8
        mat_t.append(line)
    mat = [[mat_t[j][i] for j in range(len(mat_t))] for i in range(len(mat_t[0]))]
    ans = mat_mult(mat_rCM, mat)

    return mat2n(ans)


def encrypt(s, key, l):
    if l == 192:
        round = 12
    elif l == 256:
        round = 14
    ekey_mat = key_expand(key, l)
    #print(ekey_mat)
    '''for i in range(len(ekey_mat)):
        for j in range(len(ekey_mat[i])):
            print("%2x"%ekey_mat[i][j], end = ' ')
        print()'''
    #cur_key = (ekey_mat[0][0]<<24)|(ekey_mat[1][0]<<16)|(ekey_mat[2][0]<<8)|(ekey_mat[3][0])
    cur_key = (ekey_mat[0][0] << 120) | (ekey_mat[0][1] << 112) | (ekey_mat[0][2] << 104) | (ekey_mat[0][3]<<96)|(ekey_mat[1][0] << 88) | (ekey_mat[1][1] << 80) | (ekey_mat[1][2] << 72) | (ekey_mat[1][3]<<64)|(ekey_mat[2][0] << 56) | (ekey_mat[2][1] << 48) | (ekey_mat[2][2] << 40) | (ekey_mat[2][3]<<32)|(ekey_mat[3][0] << 24) | (ekey_mat[3][1] << 16) | (ekey_mat[3][2] << 8) | (ekey_mat[3][3])
    #print("%32x" % cur_key)
    c = cur_key^s
    i = 0
    #print("%32x"%c)
    #正确
    for i in range(0, round-1):
        #print("%32x" % c)
        #第二轮出错 256第四步出错
        c = s_map(c)#第二轮出错 256 4
        #print("%32x" % c)
        c_mat = RM(c)
        #print("%32x" % mat2n(c_mat))256 4步

        c_mat = CM(c_mat)

        c = mat2n(c_mat)
        #print("%32x" % c)
        #第二轮不对 256 4步
        #cur_key = (ekey_mat[i+1][0] << 24) | (ekey_mat[i+1][1] << 16) | (ekey_mat[i+1][2] << 8) | (ekey_mat[i+1][3])
        cur_key = (ekey_mat[4*i + 4][0] << 120) | (ekey_mat[4*i + 4][1] << 112) | (ekey_mat[4*i + 4][2] << 104) | (ekey_mat[4*i + 4][3]<<96)|(ekey_mat[4*i + 5][0] << 88) | (ekey_mat[4*i + 5][1] << 80) | (ekey_mat[4*i + 5][2] << 72) | (ekey_mat[4*i + 5][3]<<64)|(ekey_mat[4*i + 6][0] << 56) | (ekey_mat[4*i + 6][1] << 48) | (ekey_mat[4*i + 6][2] << 40) | (ekey_mat[4*i + 6][3]<<32)|(ekey_mat[4*i + 7][0] << 24) | (ekey_mat[4*i + 7][1] << 16) | (ekey_mat[4*i + 7][2] << 8) | (ekey_mat[4*i + 7][3])
        #print("%32x" % cur_key) 又是密钥错的
        c ^= cur_key
        #不对 错在密钥生成
        #print("%32x" % c)
        #第一轮就不对 256第4轮start不对

    i += 1

    c = s_map(c)
    #print("%32x" % c)
    c_mat = RM(c)
    c = mat2n(c_mat)
    # cur_key = (ekey_mat[i+1][0] << 24) | (ekey_mat[i+1][1] << 16) | (ekey_mat[i+1][2] << 8) | (ekey_mat[i+1][3])
    cur_key = (ekey_mat[4 * i + 4][0] << 120) | (ekey_mat[4 * i + 4][1] << 112) | (ekey_mat[4 * i + 4][2] << 104) | (
                ekey_mat[4 * i + 4][3] << 96) | (ekey_mat[4 * i + 5][0] << 88) | (ekey_mat[4 * i + 5][1] << 80) | (
                          ekey_mat[4 * i + 5][2] << 72) | (ekey_mat[4 * i + 5][3] << 64) | (
                          ekey_mat[4 * i + 6][0] << 56) | (ekey_mat[4 * i + 6][1] << 48) | (
                          ekey_mat[4 * i + 6][2] << 40) | (ekey_mat[4 * i + 6][3] << 32) | (
                          ekey_mat[4 * i + 7][0] << 24) | (ekey_mat[4 * i + 7][1] << 16) | (
                          ekey_mat[4 * i + 7][2] << 8) | (ekey_mat[4 * i + 7][3])
    c ^= cur_key
    return c


def decrypt(s, key, l):
    if l == 192:
        round = 12
    elif l == 256:
        round = 14
    ekey_mat = key_expand(key, l)
    cur_key = (ekey_mat[4*round][0] << 120) | (ekey_mat[4*round][1] << 112) | (ekey_mat[4*round][2] << 104) | (ekey_mat[4*round][3] << 96) | (
                ekey_mat[4*round+1][0] << 88) | (ekey_mat[4*round+1][1] << 80) | (ekey_mat[4*round+1][2] << 72) | (ekey_mat[4*round+1][3] << 64) | (
                          ekey_mat[4*round+2][0] << 56) | (ekey_mat[4*round+2][1] << 48) | (ekey_mat[4*round+2][2] << 40) | (
                          ekey_mat[4*round+2][3] << 32) | (ekey_mat[4*round+3][0] << 24) | (ekey_mat[4*round+3][1] << 16) | (
                          ekey_mat[4*round+3][2] << 8) | (ekey_mat[4*round+3][3])
    #print("%32x" % cur_key)
    c = cur_key ^ s
    i = 0
    #print("%32x" % c)

    mat_t = []
    pick = 0xff
    move = 120
    for i in range(0, 4):
        line = []
        for j in range(4):
            line.append((s >> move) & pick)
            move -= 8
        mat_t.append(line)
    #mat = [[mat_t[j][i] for j in range(len(mat_t))] for i in range(len(mat_t[0]))]
    for i in range(round-2, -1, -1):
        c = r_RM(c)#第四轮不对
        #print("%32x" % c)
        c = r_s_map(c)#第4不对
        #print("%32x" % c)
        cur_key = (ekey_mat[4 * i + 4][0] << 120) | (ekey_mat[4 * i + 4][1] << 112) | (ekey_mat[4 * i + 4][2] << 104) | (
                ekey_mat[4 * i + 4][3] << 96) | (ekey_mat[4 * i + 5][0] << 88) | (ekey_mat[4 * i + 5][1] << 80) | (
                          ekey_mat[4 * i + 5][2] << 72) | (ekey_mat[4 * i + 5][3] << 64) | (
                          ekey_mat[4 * i + 6][0] << 56) | (ekey_mat[4 * i + 6][1] << 48) | (
                          ekey_mat[4 * i + 6][2] << 40) | (ekey_mat[4 * i + 6][3] << 32) | (
                          ekey_mat[4 * i + 7][0] << 24) | (ekey_mat[4 * i + 7][1] << 16) | (
                          ekey_mat[4 * i + 7][2] << 8) | (ekey_mat[4 * i + 7][3])
        c ^= cur_key#
        #print("%32x" % c)
        #print("%32x" % cur_key)
        c = r_CM(c)#
        #print("%32x" % c)
    i = -1
    cur_key = (ekey_mat[4 * i + 4][0] << 120) | (ekey_mat[4 * i + 4][1] << 112) | (ekey_mat[4 * i + 4][2] << 104) | (
                ekey_mat[4 * i + 4][3] << 96) | (ekey_mat[4 * i + 5][0] << 88) | (ekey_mat[4 * i + 5][1] << 80) | (
                          ekey_mat[4 * i + 5][2] << 72) | (ekey_mat[4 * i + 5][3] << 64) | (
                          ekey_mat[4 * i + 6][0] << 56) | (ekey_mat[4 * i + 6][1] << 48) | (
                          ekey_mat[4 * i + 6][2] << 40) | (ekey_mat[4 * i + 6][3] << 32) | (
                          ekey_mat[4 * i + 7][0] << 24) | (ekey_mat[4 * i + 7][1] << 16) | (
                          ekey_mat[4 * i + 7][2] << 8) | (ekey_mat[4 * i + 7][3])
    c = r_s_map(r_RM(c))
    c ^= cur_key
    return c


def main():
    l = eval(input().strip())
    T = eval(input().strip())
    s = eval(input().strip())
    k = eval(input().strip())
    op = eval(input().strip())
    #print("{:#x}".format(s_map(s)))
    if op == 1:
        if l == 192:
            ans = s
            while T > 0:
                ans = encrypt(ans, k, l)
                T -= 1
            print('0x', end='')
            print("{:32x}".format(ans))
        else:
            ans = s
            while T > 0:
                ans = encrypt(ans, k, l)
                T -= 1
            print('0x', end='')
            print("{:32x}".format(ans))
    else:
        if l == 192:
            ans = s
            while T > 0:
                ans = decrypt(ans, k, l)
                T -= 1
            print('0x', end='')
            print("{:32x}".format(ans))
        else:
            ans = s
            while T > 0:
                ans = decrypt(ans, k, l)
                T -= 1
            print('0x', end='')
            print("{:32x}".format(ans))
#阶段加密 解密 256

if __name__ == '__main__':
    with PyCallGraph(output=GraphvizOutput()):
        main()